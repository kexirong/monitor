// Package models contains the types for schema 'monitor'.
package models

// Code generated by xo. DO NOT EDIT.

import (
	"errors"
)

// AlarmSend represents a row from 'monitor.alarm_send'.
type AlarmSend struct {
	AnchorPoint string `json:"anchor_point"` // anchor_point
	List        string `json:"list"`         // list
	Type        Type   `json:"type"`         // type
	Channel     int    `json:"channel"`      // channel

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the AlarmSend exists in the database.
func (as *AlarmSend) Exists() bool {
	return as._exists
}

// Deleted provides information if the AlarmSend has been deleted from the database.
func (as *AlarmSend) Deleted() bool {
	return as._deleted
}

// Insert inserts the AlarmSend to the database.
func (as *AlarmSend) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if as._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key must be provided
	const sqlstr = `INSERT INTO monitor.alarm_send (` +
		`anchor_point, list, type, channel` +
		`) VALUES (` +
		`?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, as.AnchorPoint, as.List, as.Type, as.Channel)
	_, err = db.Exec(sqlstr, as.AnchorPoint, as.List, as.Type, as.Channel)
	if err != nil {
		return err
	}

	// set existence
	as._exists = true

	return nil
}

// Update updates the AlarmSend in the database.
func (as *AlarmSend) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !as._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if as._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE monitor.alarm_send SET ` +
		`list = ?, type = ?, channel = ?` +
		` WHERE anchor_point = ?`

	// run query
	XOLog(sqlstr, as.List, as.Type, as.Channel, as.AnchorPoint)
	_, err = db.Exec(sqlstr, as.List, as.Type, as.Channel, as.AnchorPoint)
	return err
}

// Save saves the AlarmSend to the database.
func (as *AlarmSend) Save(db XODB) error {
	if as.Exists() {
		return as.Update(db)
	}

	return as.Insert(db)
}

// Delete deletes the AlarmSend from the database.
func (as *AlarmSend) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !as._exists {
		return nil
	}

	// if deleted, bail
	if as._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM monitor.alarm_send WHERE anchor_point = ?`

	// run query
	XOLog(sqlstr, as.AnchorPoint)
	_, err = db.Exec(sqlstr, as.AnchorPoint)
	if err != nil {
		return err
	}

	// set deleted
	as._deleted = true

	return nil
}

// AlarmSendByAnchorPoint retrieves a row from 'monitor.alarm_send' as a AlarmSend.
//
// Generated from index 'alarm_send_anchor_point_pkey'.
func AlarmSendByAnchorPoint(db XODB, anchorPoint string) (*AlarmSend, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`anchor_point, list, type, channel ` +
		`FROM monitor.alarm_send ` +
		`WHERE anchor_point = ?`

	// run query
	XOLog(sqlstr, anchorPoint)
	as := AlarmSend{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, anchorPoint).Scan(&as.AnchorPoint, &as.List, &as.Type, &as.Channel)
	if err != nil {
		return nil, err
	}

	return &as, nil
}

// AlarmSendsByChannel retrieves a row from 'monitor.alarm_send' as a AlarmSend.
//
// Generated from index 'channel'.
func AlarmSendsByChannel(db XODB, channel int) ([]*AlarmSend, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`anchor_point, list, type, channel ` +
		`FROM monitor.alarm_send ` +
		`WHERE channel = ?`

	// run query
	XOLog(sqlstr, channel)
	q, err := db.Query(sqlstr, channel)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*AlarmSend{}
	for q.Next() {
		as := AlarmSend{
			_exists: true,
		}

		// scan
		err = q.Scan(&as.AnchorPoint, &as.List, &as.Type, &as.Channel)
		if err != nil {
			return nil, err
		}

		res = append(res, &as)
	}

	return res, nil
}

func AlarmSendsAll(db XODB) ([]*AlarmSend, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`anchor_point, list, type, channel ` +
		`FROM monitor.alarm_link `

	// run query
	XOLog(sqlstr)
	q, err := db.Query(sqlstr)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*AlarmSend{}
	for q.Next() {
		al := AlarmSend{
			_exists: true,
		}
		// scan
		err = q.Scan(&al.AnchorPoint, &al.List, &al.Type, &al.Channel)
		if err != nil {
			return nil, err
		}
		res = append(res, &al)
	}
	return res, nil
}
