// Package models contains the types for schema 'monitor'.
package models

// Code generated by xo. DO NOT EDIT.

import (
	"errors"
	"fmt"
	"time"
)

// AlarmEvent represents a row from 'monitor.alarm_event'.
type AlarmEvent struct {
	ID          int64     `json:"id"`           // id
	HostName    string    `json:"host_name"`    // host_name
	AnchorPoint string    `json:"anchor_point"` // anchor_point
	Rule        string    `json:"rule"`         // rule
	Value       float64   `json:"value"`        // value
	Message     string    `json:"message"`      // message
	Level       Level     `json:"level"`        // level
	Stat        int       `json:"stat"`         // stat
	HandleMan   string    `json:"handle_man"`   // handle_man
	CreatedAt   time.Time `json:"created_at"`   // created_at
	UpdatedAt   time.Time `json:"updated_at"`   // updated_at

	// xo fields
	_exists, _deleted bool
}

func (ae *AlarmEvent) String() string {
	return fmt.Sprintf(`
	[%s]
	seq: %d, 
	Time: %s,
	HostName: %s,
	AnchorPoint: %s,
	Value: %g,
	Message: %s`,
		ae.Level, ae.ID, ae.CreatedAt, ae.HostName, ae.AnchorPoint, ae.Value, ae.Message)
}

// Exists determines if the AlarmEvent exists in the database.
func (ae *AlarmEvent) Exists() bool {
	return ae._exists
}

// Deleted provides information if the AlarmEvent has been deleted from the database.
func (ae *AlarmEvent) Deleted() bool {
	return ae._deleted
}

// Insert inserts the AlarmEvent to the database.
func (ae *AlarmEvent) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if ae._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by autoincrement
	const sqlstr = `INSERT INTO monitor.alarm_event (` +
		`host_name, anchor_point, rule, value, message, level, stat, handle_man` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, ae.HostName, ae.AnchorPoint, ae.Rule, ae.Value, ae.Message, ae.Level, ae.Stat, ae.HandleMan)
	res, err := db.Exec(sqlstr, ae.HostName, ae.AnchorPoint, ae.Rule, ae.Value, ae.Message, ae.Level, ae.Stat, ae.HandleMan)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	ae.ID = int64(id)
	ae._exists = true

	return nil
}

// Update updates the AlarmEvent in the database.
func (ae *AlarmEvent) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !ae._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if ae._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE monitor.alarm_event SET ` +
		`host_name = ?, anchor_point = ?, rule = ?, value = ?, message = ?, level = ?, stat = ?, handle_man = ?` +
		` WHERE id = ?`

	// run query
	XOLog(sqlstr, ae.HostName, ae.AnchorPoint, ae.Rule, ae.Value, ae.Message, ae.Level, ae.Stat, ae.HandleMan, ae.ID)
	_, err = db.Exec(sqlstr, ae.HostName, ae.AnchorPoint, ae.Rule, ae.Value, ae.Message, ae.Level, ae.Stat, ae.HandleMan, ae.ID)
	return err
}

// Save saves the AlarmEvent to the database.
func (ae *AlarmEvent) Save(db XODB) error {
	if ae.Exists() {
		return ae.Update(db)
	}

	return ae.Insert(db)
}

// Delete deletes the AlarmEvent from the database.
func (ae *AlarmEvent) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !ae._exists {
		return nil
	}

	// if deleted, bail
	if ae._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM monitor.alarm_event WHERE id = ?`

	// run query
	XOLog(sqlstr, ae.ID)
	_, err = db.Exec(sqlstr, ae.ID)
	if err != nil {
		return err
	}

	// set deleted
	ae._deleted = true

	return nil
}

func AlarmEventsAll(db XODB) ([]*AlarmEvent, error) {
	const sqlstr = `SELECT ` +
		`id, host_name, anchor_point, rule, value, message, level, stat, handle_man, created_at, updated_at ` +
		`FROM monitor.alarm_event `
	q, err := db.Query(sqlstr)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*AlarmEvent{}
	for q.Next() {
		ae := AlarmEvent{
			_exists: true,
		}

		// scan
		err = q.Scan(&ae.ID, &ae.HostName, &ae.AnchorPoint, &ae.Rule, &ae.Value, &ae.Message, &ae.Level, &ae.Stat, &ae.HandleMan, &ae.CreatedAt, &ae.UpdatedAt)
		if err != nil {
			return nil, err
		}

		res = append(res, &ae)
	}

	return res, nil
} // AlarmEventsByStat retrieves a row from 'monitor.alarm_event' as a AlarmEvent.
//
// Generated from index 'IDX_AlarmEvent_stat'.
func AlarmEventsByStat(db XODB, stat int) ([]*AlarmEvent, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, host_name, anchor_point, rule, value, message, level, stat, handle_man, created_at, updated_at ` +
		`FROM monitor.alarm_event ` +
		`WHERE stat = ?`

	// run query
	XOLog(sqlstr, stat)
	q, err := db.Query(sqlstr, stat)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*AlarmEvent{}
	for q.Next() {
		ae := AlarmEvent{
			_exists: true,
		}

		// scan
		err = q.Scan(&ae.ID, &ae.HostName, &ae.AnchorPoint, &ae.Rule, &ae.Value, &ae.Message, &ae.Level, &ae.Stat, &ae.HandleMan, &ae.CreatedAt, &ae.UpdatedAt)
		if err != nil {
			return nil, err
		}

		res = append(res, &ae)
	}

	return res, nil
}

// AlarmEventByID retrieves a row from 'monitor.alarm_event' as a AlarmEvent.
//
// Generated from index 'alarm_event_id_pkey'.
func AlarmEventByID(db XODB, id int64) (*AlarmEvent, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, host_name, anchor_point, rule, value, message, level, stat, handle_man, created_at, updated_at ` +
		`FROM monitor.alarm_event ` +
		`WHERE id = ?`

	// run query
	XOLog(sqlstr, id)
	ae := AlarmEvent{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&ae.ID, &ae.HostName, &ae.AnchorPoint, &ae.Rule, &ae.Value, &ae.Message, &ae.Level, &ae.Stat, &ae.HandleMan, &ae.CreatedAt, &ae.UpdatedAt)
	if err != nil {
		return nil, err
	}

	return &ae, nil
}
