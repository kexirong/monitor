// Package models contains the types for schema 'monitor'.
package models

// Code generated by xo. DO NOT EDIT.

import (
	"database/sql/driver"
	"errors"
)

// Level is the 'level' enum type from schema 'monitor'.
type Level uint16

const (
	// LevelWarning is the 'warning' Level.
	LevelWarning = Level(1)

	// LevelSerious is the 'serious' Level.
	LevelSerious = Level(2)

	// LevelDisaster is the 'disaster' Level.
	LevelDisaster = Level(3)
)

// String returns the string value of the Level.
func (l Level) String() string {
	var enumVal string

	switch l {
	case LevelWarning:
		enumVal = "warning"

	case LevelSerious:
		enumVal = "serious"

	case LevelDisaster:
		enumVal = "disaster"
	}

	return enumVal
}

// MarshalText marshals Level into text.
func (l Level) MarshalText() ([]byte, error) {
	return []byte(l.String()), nil
}

// UnmarshalText unmarshals Level from text.
func (l *Level) UnmarshalText(text []byte) error {
	switch string(text) {
	case "warning":
		*l = LevelWarning

	case "serious":
		*l = LevelSerious

	case "disaster":
		*l = LevelDisaster

	default:
		return errors.New("invalid Level")
	}

	return nil
}

// Value satisfies the sql/driver.Valuer interface for Level.
func (l Level) Value() (driver.Value, error) {
	return l.String(), nil
}

// Scan satisfies the database/sql.Scanner interface for Level.
func (l *Level) Scan(src interface{}) error {
	buf, ok := src.([]byte)
	if !ok {
		return errors.New("invalid Level")
	}

	return l.UnmarshalText(buf)
}
