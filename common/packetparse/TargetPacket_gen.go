package packetparse

// Code generated by github.com/tinylib/msgp DO NOT EDIT.

import (
	"github.com/tinylib/msgp/msgp"
)

// MarshalMsg implements msgp.Marshaler
func (z *TargetPacket) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 8
	// string "HostName"
	o = append(o, 0x88, 0xa8, 0x48, 0x6f, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65)
	o = msgp.AppendString(o, z.HostName)
	// string "TimeStamp"
	o = append(o, 0xa9, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70)
	o = msgp.AppendFloat64(o, z.TimeStamp)
	// string "Plugin"
	o = append(o, 0xa6, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e)
	o = msgp.AppendString(o, z.Plugin)
	// string "Instance"
	o = append(o, 0xa8, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65)
	o = msgp.AppendString(o, z.Instance)
	// string "Type"
	o = append(o, 0xa4, 0x54, 0x79, 0x70, 0x65)
	o = msgp.AppendString(o, z.Type)
	// string "Value"
	o = append(o, 0xa5, 0x56, 0x61, 0x6c, 0x75, 0x65)
	o = msgp.AppendArrayHeader(o, uint32(len(z.Value)))
	for za0001 := range z.Value {
		o = msgp.AppendFloat64(o, z.Value[za0001])
	}
	// string "VlTags"
	o = append(o, 0xa6, 0x56, 0x6c, 0x54, 0x61, 0x67, 0x73)
	o = msgp.AppendString(o, z.VlTags)
	// string "Message"
	o = append(o, 0xa7, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65)
	o = msgp.AppendString(o, z.Message)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *TargetPacket) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			return
		}
		switch msgp.UnsafeString(field) {
		case "HostName":
			z.HostName, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				return
			}
		case "TimeStamp":
			z.TimeStamp, bts, err = msgp.ReadFloat64Bytes(bts)
			if err != nil {
				return
			}
		case "Plugin":
			z.Plugin, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				return
			}
		case "Instance":
			z.Instance, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				return
			}
		case "Type":
			z.Type, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				return
			}
		case "Value":
			var zb0002 uint32
			zb0002, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				return
			}
			if cap(z.Value) >= int(zb0002) {
				z.Value = (z.Value)[:zb0002]
			} else {
				z.Value = make([]float64, zb0002)
			}
			for za0001 := range z.Value {
				z.Value[za0001], bts, err = msgp.ReadFloat64Bytes(bts)
				if err != nil {
					return
				}
			}
		case "VlTags":
			z.VlTags, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				return
			}
		case "Message":
			z.Message, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *TargetPacket) Msgsize() (s int) {
	s = 1 + 9 + msgp.StringPrefixSize + len(z.HostName) + 10 + msgp.Float64Size + 7 + msgp.StringPrefixSize + len(z.Plugin) + 9 + msgp.StringPrefixSize + len(z.Instance) + 5 + msgp.StringPrefixSize + len(z.Type) + 6 + msgp.ArrayHeaderSize + (len(z.Value) * (msgp.Float64Size)) + 7 + msgp.StringPrefixSize + len(z.VlTags) + 8 + msgp.StringPrefixSize + len(z.Message)
	return
}

// MarshalMsg implements msgp.Marshaler
func (z TargetPackets) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	o = msgp.AppendArrayHeader(o, uint32(len(z)))
	for za0001 := range z {
		if z[za0001] == nil {
			o = msgp.AppendNil(o)
		} else {
			o, err = z[za0001].MarshalMsg(o)
			if err != nil {
				return
			}
		}
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *TargetPackets) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var zb0002 uint32
	zb0002, bts, err = msgp.ReadArrayHeaderBytes(bts)
	if err != nil {
		return
	}
	if cap((*z)) >= int(zb0002) {
		(*z) = (*z)[:zb0002]
	} else {
		(*z) = make(TargetPackets, zb0002)
	}
	for zb0001 := range *z {
		if msgp.IsNil(bts) {
			bts, err = msgp.ReadNilBytes(bts)
			if err != nil {
				return
			}
			(*z)[zb0001] = nil
		} else {
			if (*z)[zb0001] == nil {
				(*z)[zb0001] = new(TargetPacket)
			}
			bts, err = (*z)[zb0001].UnmarshalMsg(bts)
			if err != nil {
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z TargetPackets) Msgsize() (s int) {
	s = msgp.ArrayHeaderSize
	for zb0003 := range z {
		if z[zb0003] == nil {
			s += msgp.NilSize
		} else {
			s += z[zb0003].Msgsize()
		}
	}
	return
}
